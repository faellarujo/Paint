spring.application.name=Paint
spring.datasource.url=jdbc:mysql://localhost:3306/Paint
spring.datasource.username=Raphael
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.show-sql=true

spring.jpa.hibernate.ddl-auto=update

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html




# Precisamos adiar a inicializaÃƒÂ§ÃƒÂ£o do Hibernate antes de inserir os dados
spring.jpa.defer-datasource-initialization=true


# ConfiguraÃƒÂ§ÃƒÂ£o dos scripts SQL de inicializaÃƒÂ§ÃƒÂ£o de dados
spring.sql.init.data-locations=classpath:scripts/dados.sql
/**

A propriedade `spring.jpa.hibernate.ddl-auto` é usada para configurar o comportamento do Hibernate em relação ao esquema do banco de dados. Aqui estão os valores possíveis e seus significados:

- `none`: Não faz nada com o esquema do banco de dados. O Hibernate não gerencia o esquema.
- `validate`: Valida o esquema do banco de dados, verificando se ele está em conformidade com as entidades mapeadas. Não faz nenhuma alteração no esquema.
- `update`: Atualiza o esquema do banco de dados conforme necessário, sem perder dados. Adiciona novas colunas e tabelas, mas não remove ou altera colunas existentes.
- `create`: Cria o esquema do banco de dados, descartando os dados existentes. Isso significa que todas as tabelas serão recriadas a cada inicialização da aplicação.
- `create-drop`: Cria o esquema do banco de dados ao iniciar a aplicação e o descarta ao finalizar a aplicação.
- `none`: Não faz nada com o esquema do banco de dados. O Hibernate não gerencia o esquema.

No seu caso, a configuração `spring.jpa.hibernate.ddl-auto=update` significa que o Hibernate irá atualizar o esquema do banco de dados conforme necessário, sem perder dados existentes. Isso é útil durante o desenvolvimento, pois permite que você faça alterações nas entidades sem precisar recriar o banco de dados manualmente.



